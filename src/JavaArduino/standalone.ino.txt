// for the clock

#include <SparkFunDS1307RTC.h>
#include <Wire.h>

// for the LED strips

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 6

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
Adafruit_NeoPixel strip = Adafruit_NeoPixel(74*44, PIN, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

int lastSecond = -1;
const static int ROWS = 44;
const static int COLS = 74;
static int colmax = 73;
int xmax = 73;
int ymax = 43;
int sizex = 63;
int sizey = 36;
int logo [36][63][3] ={
{{1,1,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,1,0},{0,1,1},{0,0,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,1,1},{41,40,40},{97,94,95},{32,31,31},{1,1,1},{1,1,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{6,5,5},{84,83,83},{128,125,126},{92,89,90},{10,10,10},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,2,3},{4,6,9},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{15,15,15},{88,87,87},{134,131,132},{133,130,131},{122,119,120},{50,49,49},{1,1,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{2,3,4},{24,34,47},{50,66,93},{10,14,19},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{15,15,15},{85,83,84},{130,127,128},{134,131,132},{134,131,132},{132,129,130},{106,104,105},{25,25,25},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,3,5},{24,35,49},{77,102,144},{98,127,182},{47,62,88},{3,4,6},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{22,22,22},{92,89,90},{130,127,128},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{128,125,126},{80,79,79},{9,9,9},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{4,5,5},{4,4,4},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,1,2},{27,37,53},{83,110,156},{111,143,205},{110,143,203},{80,104,148},{21,29,41},{0,0,0},{0,0,0},{1,1,1},{25,24,24},{87,86,86},{127,125,126},{133,130,131},{134,131,132},{134,131,132},{133,131,132},{133,131,132},{133,130,131},{112,110,111},{44,43,43},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{15,16,16},{66,69,69},{55,57,57},{8,8,8},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,2,2},{28,37,53},{81,107,153},{112,145,206},{112,145,207},{112,145,207},{104,135,193},{59,77,110},{8,11,16},{2,2,2},{26,26,26},{92,90,91},{128,127,127},{133,131,131},{134,131,131},{134,131,132},{133,131,132},{133,131,132},{134,131,132},{133,131,132},{129,127,128},{91,90,90},{19,19,19},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{15,16,16},{87,91,92},{179,184,187},{155,158,160},{44,47,46},{1,2,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{30,42,58},{87,114,162},{111,144,206},{112,145,207},{112,145,207},{112,145,207},{111,145,206},{88,116,165},{32,42,59},{32,32,32},{90,88,89},{127,124,125},{133,131,132},{133,132,131},{134,131,131},{134,131,132},{133,131,132},{133,131,132},{134,131,132},{134,131,132},{134,131,132},{122,120,121},{66,65,65},{8,8,8},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{15,16,16},{90,92,94},{183,188,191},{219,225,229},{206,211,214},{107,111,111},{16,17,17},{0,0,0},{0,0,0},{3,5,6},{32,43,60},{89,116,165},{112,144,206},{112,145,207},{112,145,207},{112,145,206},{112,145,207},{103,134,191},{74,96,136},{54,62,74},{93,92,93},{129,127,126},{133,132,130},{134,132,132},{134,132,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{132,129,130},{103,102,102},{35,34,34},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{15,15,16},{97,99,101},{187,190,194},{218,223,227},{220,225,229},{219,223,228},{183,187,190},{57,58,60},{2,2,2},{0,1,2},{39,51,74},{89,116,166},{112,145,205},{112,145,206},{112,145,207},{112,145,208},{112,145,207},{106,137,195},{71,93,132},{55,60,72},{97,96,97},{128,124,125},{134,131,132},{134,131,131},{134,131,132},{133,131,132},{133,131,132},{134,131,132},{133,130,131},{133,130,131},{133,130,131},{133,130,131},{133,130,131},{133,130,131},{126,124,125},{78,76,77},{16,15,15},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{13,13,13},{97,99,101},{191,195,198},{219,226,229},{219,225,229},{219,225,229},{221,225,229},{219,223,228},{123,125,128},{24,27,30},{38,50,71},{91,118,169},{111,143,205},{112,145,207},{111,145,206},{111,145,207},{112,144,207},{103,135,192},{71,93,130},{55,61,74},{96,93,94},{131,128,129},{133,130,132},{133,130,131},{131,128,129},{128,125,126},{123,121,121},{114,112,112},{106,104,104},{94,92,93},{92,90,91},{90,88,88},{88,86,86},{87,85,85},{85,83,84},{84,82,83},{69,68,68},{25,25,25},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{11,11,11},{109,112,114},{192,196,200},{219,223,227},{219,225,229},{219,225,229},{220,225,229},{220,224,229},{196,201,206},{92,96,100},{56,71,94},{91,119,169},{110,142,204},{112,145,207},{112,145,207},{111,145,207},{111,145,207},{107,138,197},{68,90,128},{48,55,63},{103,100,101},{125,122,123},{119,116,117},{99,97,98},{69,68,69},{52,51,52},{46,46,45},{43,43,43},{36,35,35},{31,31,31},{24,23,23},{22,22,22},{21,20,20},{20,19,19},{19,18,18},{18,18,18},{18,17,17},{17,16,16},{7,7,7},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{10,10,10},{104,108,109},{201,206,209},{220,225,229},{221,225,229},{220,225,229},{220,225,229},{221,225,229},{193,197,201},{111,116,120},{63,77,100},{92,119,170},{110,143,204},{112,145,207},{112,145,207},{112,145,207},{111,144,204},{102,133,190},{65,85,121},{26,31,40},{47,46,47},{58,57,58},{41,40,41},{34,33,33},{24,24,24},{10,10,10},{2,2,2},{0,1,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{2,2,2},{124,128,129},{199,203,206},{219,226,229},{221,225,229},{221,225,229},{220,225,229},{220,225,229},{194,198,201},{102,107,110},{66,82,107},{94,123,174},{110,143,203},{112,146,207},{111,144,206},{106,138,198},{86,110,156},{36,51,70},{28,38,55},{12,15,22},{3,3,3},{11,11,11},{6,6,6},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{11,11,11},{116,120,121},{209,213,217},{218,225,228},{219,225,229},{221,225,229},{220,225,229},{218,225,228},{191,196,200},{105,110,116},{63,78,104},{92,120,172},{105,136,194},{87,113,162},{70,92,132},{42,57,81},{21,27,40},{15,20,27},{1,3,4},{0,1,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{2,2,2},{7,7,7},{17,16,16},{25,25,25},{37,36,36},{41,40,40},{41,41,41},{42,41,41},{44,44,44},{46,45,45},{46,45,45},{45,44,44},{43,42,42},{42,41,41},{41,41,41},{36,36,36},{27,26,26},{18,18,18},{8,8,8},{3,3,3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{2,2,3},{137,139,142},{205,211,214},{221,226,230},{219,226,229},{219,225,229},{219,225,229},{220,224,228},{191,196,199},{100,104,110},{61,77,104},{85,113,160},{55,75,106},{27,37,52},{14,20,27},{8,11,16},{3,4,7},{0,0,0},{0,0,0},{0,0,0},{5,5,5},{18,18,18},{57,57,57},{93,91,91},{100,98,98},{102,100,100},{104,102,103},{108,106,107},{113,110,111},{118,116,117},{121,118,119},{122,119,120},{122,119,120},{123,120,121},{123,120,121},{123,120,121},{122,120,121},{122,119,120},{122,119,120},{121,118,119},{119,116,117},{114,111,112},{109,106,107},{104,101,102},{101,99,99},{40,39,39},{3,3,3},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{14,14,15},{129,132,133},{208,215,218},{220,224,228},{220,225,229},{220,225,229},{220,225,229},{220,225,229},{195,199,202},{92,96,97},{26,31,40},{26,35,49},{11,15,21},{3,5,7},{0,1,1},{1,3,5},{16,24,33},{28,38,55},{1,3,3},{36,36,36},{119,117,117},{123,121,122},{124,121,122},{127,126,126},{130,129,129},{132,129,130},{132,129,130},{132,129,130},{132,129,130},{133,130,131},{133,130,131},{133,130,131},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{133,130,131},{133,130,131},{133,130,131},{132,129,130},{132,129,130},{132,129,130},{109,108,108},{28,27,27},{1,1,1},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{5,5,5},{138,141,142},{211,215,219},{219,224,228},{220,225,229},{219,225,229},{219,224,228},{218,222,226},{185,189,192},{71,71,72},{7,7,7},{0,0,0},{1,1,1},{2,4,5},{27,37,52},{73,97,138},{90,118,167},{95,124,177},{49,65,91},{34,34,35},{121,120,120},{132,129,130},{134,131,132},{133,131,132},{133,131,132},{133,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{133,130,131},{80,79,79},{10,10,10},{0,0,0},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{20,20,20},{138,142,142},{210,217,219},{219,226,229},{219,224,228},{218,222,226},{206,213,216},{158,162,166},{98,100,100},{9,9,10},{4,7,9},{18,27,36},{39,53,75},{73,98,139},{107,139,198},{112,145,207},{111,144,206},{103,135,194},{58,75,106},{48,49,53},{128,125,126},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{121,118,119},{37,36,37},{1,1,1},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{1,1,1},{16,17,17},{130,135,138},{210,214,218},{220,224,228},{214,221,224},{203,208,212},{144,145,150},{43,43,44},{10,10,11},{6,8,12},{44,58,83},{89,116,166},{100,130,187},{111,144,205},{111,145,207},{112,145,205},{112,145,205},{103,134,192},{54,69,97},{51,53,56},{117,115,114},{133,130,131},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,130,132},{134,130,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{103,101,102},{13,13,13},{0,0,0}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{29,29,30},{139,143,146},{212,217,221},{210,214,218},{190,194,197},{147,152,153},{52,54,54},{32,32,33},{54,54,55},{12,15,20},{43,59,84},{103,135,192},{113,146,208},{113,146,208},{112,145,207},{112,145,206},{111,144,205},{98,129,184},{57,75,104},{57,60,63},{120,117,118},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,130,132},{134,130,132},{133,130,131},{131,128,129},{128,125,126},{127,124,125},{127,124,125},{127,124,125},{127,124,125},{127,124,125},{127,124,125},{127,124,125},{129,126,127},{133,130,131},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{134,131,132},{66,66,66},{3,3,3}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{2,2,2},{29,30,30},{128,130,133},{203,208,211},{191,197,200},{125,129,130},{68,69,69},{49,50,51},{134,138,140},{154,158,161},{72,77,80},{59,75,106},{107,139,199},{112,146,207},{113,146,208},{112,145,207},{112,145,207},{111,144,205},{97,128,181},{56,72,99},{59,60,65},{108,105,106},{126,123,124},{128,125,126},{128,125,126},{119,117,118},{115,112,113},{108,106,107},{108,106,106},{108,105,106},{108,105,106},{108,105,106},{107,105,105},{99,97,97},{79,76,77},{69,67,67},{69,67,67},{69,67,67},{69,67,67},{69,67,67},{69,67,67},{68,66,67},{81,79,80},{104,101,102},{108,105,106},{108,105,106},{108,105,106},{108,106,106},{108,106,106},{110,107,108},{115,112,113},{121,118,119},{126,123,124},{128,125,126},{129,125,126},{113,111,112},{26,26,26}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{2,2,3},{36,36,37},{133,135,138},{181,185,189},{159,163,166},{97,98,100},{78,79,81},{131,135,137},{206,210,214},{182,186,191},{78,84,89},{48,64,92},{107,138,197},{111,145,207},{111,145,207},{112,145,207},{109,142,202},{102,132,188},{89,116,165},{51,66,94},{39,42,47},{77,75,76},{83,80,81},{78,76,77},{78,77,75},{77,75,75},{45,44,44},{28,27,27},{1,1,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{7,7,7},{28,27,27},{51,50,50},{71,70,70},{77,77,77},{79,77,78},{84,81,81},{51,50,50}},
{{0,0,0},{0,0,0},{0,0,0},{0,0,0},{3,4,4},{36,38,39},{112,115,117},{144,147,150},{109,112,114},{115,119,120},{161,165,168},{202,207,211},{213,221,222},{178,183,186},{71,76,83},{63,82,115},{103,135,193},{106,137,196},{102,132,189},{86,112,159},{77,102,145},{70,92,131},{49,65,93},{24,33,47},{7,9,12},{12,12,12},{13,13,13},{3,3,3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{4,4,4},{13,13,13}},
{{0,0,0},{0,0,0},{0,0,0},{3,3,3},{27,29,29},{93,96,98},{144,147,148},{113,115,117},{155,158,161},{210,215,219},{219,224,228},{219,223,227},{169,174,177},{65,67,71},{35,46,66},{79,100,144},{66,87,125},{60,77,110},{51,67,96},{17,24,34},{0,3,3},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{1,0,0},{0,0,0},{1,1,1},{16,17,17},{67,70,71},{135,139,141},{170,175,178},{202,207,210},{214,219,223},{208,215,218},{189,194,197},{146,149,153},{60,61,62},{11,14,17},{21,29,41},{19,25,37},{4,8,12},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,1,0},{2,2,2},{33,33,33},{91,94,95},{147,150,153},{203,209,213},{195,200,204},{164,169,172},{138,141,144},{109,114,116},{78,81,82},{26,27,27},{3,2,2},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{15,16,17},{46,48,48},{143,146,148},{181,184,188},{167,170,174},{114,116,118},{79,81,83},{48,50,51},{26,27,28},{5,7,6},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{57,57,58},{92,96,96},{125,129,130},{88,90,92},{51,52,53},{10,10,10},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{26,26,26},{36,37,37},{24,25,26},{6,6,7},{1,1,2},{1,1,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,1},{1,1,2},{1,1,2},{1,1,1},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{5,7,10},{59,78,111},{44,59,83},{38,50,71},{40,53,75},{40,54,77},{19,26,37},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{22,30,43},{49,65,93},{41,55,79},{37,50,70},{39,52,76},{41,54,79},{7,9,13},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0}},
{{0,0,0},{8,11,15},{83,108,154},{32,43,60},{13,18,25},{13,19,26},{40,55,77},{43,58,81},{27,36,51},{54,72,102},{58,78,110},{57,76,107},{50,68,95},{12,17,23},{0,0,0},{21,30,43},{75,96,137},{16,20,29},{0,0,0},{17,23,34},{55,73,106},{5,8,11},{14,18,26},{49,65,91},{20,29,41},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{34,45,64},{59,78,111},{25,33,47},{13,18,25},{16,20,29},{61,81,117},{18,25,36},{34,48,67},{60,78,112},{57,76,107},{56,75,105},{43,58,82},{4,8,11},{3,5,7},{34,45,65},{54,72,102},{11,16,22},{0,0,0},{49,65,91},{49,65,91},{5,6,9},{20,27,40},{50,66,96},{8,10,16},{0,0,0}},
{{0,0,0},{8,11,16},{87,114,163},{46,63,88},{31,42,60},{35,46,65},{55,72,102},{41,55,78},{34,45,64},{45,59,83},{26,36,50},{23,31,43},{19,25,36},{3,5,7},{2,4,6},{57,75,107},{37,49,68},{47,62,89},{0,0,0},{25,33,47},{80,106,149},{33,44,63},{46,61,87},{28,37,53},{6,8,11},{0,0,0},{2,2,2},{49,65,91},{36,50,69},{49,65,91},{15,24,34},{15,23,32},{49,65,91},{49,65,91},{25,36,50},{8,11,14},{0,0,0},{0,0,0},{35,45,65},{66,87,125},{40,54,78},{31,42,60},{35,48,69},{67,90,129},{16,21,30},{48,64,92},{37,50,70},{23,31,42},{22,30,41},{15,20,30},{1,2,3},{16,22,31},{51,67,96},{46,62,88},{29,40,57},{0,0,0},{53,70,99},{55,71,101},{44,57,82},{44,58,83},{20,27,39},{2,2,4},{0,0,0}},
{{0,0,0},{8,11,16},{86,114,161},{44,61,86},{49,65,91},{49,65,91},{16,24,33},{5,9,11},{33,44,63},{60,80,113},{54,72,101},{52,69,97},{40,54,78},{5,7,10},{16,24,34},{51,66,93},{6,8,11},{57,78,110},{13,20,27},{24,33,48},{95,124,177},{78,102,147},{63,84,119},{13,18,25},{0,0,0},{0,0,0},{0,0,0},{2,4,5},{43,58,83},{27,37,54},{4,8,11},{49,65,91},{6,8,13},{5,8,10},{15,23,32},{43,58,82},{0,0,0},{0,0,0},{35,46,66},{66,87,124},{38,52,73},{49,65,91},{49,65,91},{14,21,29},{2,3,4},{48,64,91},{60,81,113},{52,69,97},{50,67,95},{32,44,63},{3,7,8},{26,36,50},{38,51,73},{24,33,48},{45,61,87},{14,19,28},{53,70,99},{80,106,151},{84,110,156},{48,62,89},{5,7,10},{0,0,0},{0,0,0}},
{{0,0,0},{8,11,16},{81,107,152},{23,32,43},{2,3,4},{1,2,3},{0,1,1},{0,0,0},{33,43,62},{37,48,69},{10,16,22},{5,10,13},{3,7,9},{1,4,4},{65,86,124},{48,63,91},{37,50,71},{52,71,101},{73,94,136},{30,40,56},{80,104,149},{18,26,35},{37,49,69},{49,65,91},{10,14,20},{0,0,0},{0,0,0},{0,0,0},{43,58,83},{26,36,51},{2,2,3},{53,71,100},{4,9,10},{1,2,3},{22,30,43},{45,60,85},{0,0,0},{0,0,0},{34,46,65},{55,74,105},{15,21,29},{2,3,4},{1,2,3},{0,0,0},{0,0,0},{49,65,92},{25,34,49},{5,10,13},{5,9,12},{4,5,7},{12,16,23},{58,76,110},{45,61,87},{39,52,74},{63,83,121},{46,61,89},{58,76,107},{52,68,97},{17,23,33},{50,68,97},{35,46,66},{3,3,5},{0,0,0}},
{{0,0,0},{6,8,11},{60,78,110},{14,20,28},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{25,33,47},{60,78,112},{67,87,126},{66,88,125},{61,80,114},{37,52,75},{49,67,95},{1,3,3},{1,1,2},{6,9,12},{47,64,90},{41,54,77},{56,73,106},{5,7,11},{5,7,11},{49,65,91},{32,46,64},{4,6,8},{0,0,0},{0,0,0},{29,42,59},{18,25,36},{1,1,2},{11,15,20},{49,66,94},{53,70,99},{35,48,70},{3,7,11},{0,0,0},{0,0,0},{25,33,47},{39,53,75},{9,13,18},{0,0,0},{0,0,0},{0,0,0},{0,0,0},{33,46,65},{66,87,126},{66,88,124},{66,88,124},{57,77,108},{35,48,68},{42,57,81},{1,2,3},{1,1,2},{18,24,35},{35,47,68},{51,69,99},{32,45,65},{4,6,9},{6,10,14},{54,71,102},{24,31,47},{0,0,1}}
};

byte c[10000];
boolean tmp=false;

  
void setup() {

  pinMode (8, OUTPUT);  // set jumper from 8 to 10 to turn off at night and on weekends
  pinMode (9, OUTPUT);  // set jumper from 9 to 10 to leave on always
  pinMode (10, INPUT);

  digitalWrite (8, LOW);
  digitalWrite (9, HIGH);
  
  rtc.begin();  // start clock
// rtc.setTime (0, 17, 16, 5, 9, 8, 2018); // sec, min, hour, day (sun=1), date, month, year
  rtc.set12Hour();
//  rtc.autoTime(); // get time from computer 

  Serial.begin(250000);
  delay(2500);
  // This is for Trinket 5V 16MHz, you can remove these three lines if you are not using a Trinket
  #if defined (__AVR_ATtiny85__)
    if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
  #endif
  // End of trinket special code

  strip.begin();
  strip.setBrightness(32);
  colorRect(0, 0, xmax+1, ymax+1, 0, 0, 0, true);
  strip.show();
  int offset = (xmax - sizex)/2;
  for (int r=0; r<sizey; r++) {
    for (int c=0; c<sizex; c++) {
      strip.setPixelColor(toLEDNum(r, c+offset), strip.Color(logo[r][c][0], logo[r][c][1], logo[r][c][2]));
    }
  }
  strip.show();
}


boolean setupB=true;

int curTime = 0;
int colorIndex = 0;
bool on=true;
void loop() {
  rtc.update();
  bool wasOn = on;
  // check jumper - if ON - don't turn off for time of day
  if (digitalRead (10) == HIGH) {
    on = true;
  }
  else {
    on =(rtc.day() != 1 && rtc.day() != 7) && 
        ((!rtc.pm() && ((rtc.hour() >= 7 && rtc.minute() >= 30) || rtc.hour() > 7)) || 
        (rtc.pm() && ((rtc.hour() <= 3 && rtc.minute() <= 15) || rtc.hour() < 3 || rtc.hour() == 12)));
  }
  if (on) {
    if (!wasOn) {   // if transition off to on - redisplay logo
      int offset = (xmax - sizex)/2;
      for (int r=0; r<sizey; r++) {
        for (int c=0; c<sizex; c++) {
          strip.setPixelColor(toLEDNum(r, c+offset), strip.Color(logo[r][c][0], logo[r][c][1], logo[r][c][2]));
        }
      }
      strip.show();
    }
    if (rtc.second() != lastSecond) {
      lastSecond = rtc.second();
      colorRect (30, 0, COLS, ROWS-30, 0, 0, 0, true);
      String timeStr = "";
      if (rtc.hour() < 10) timeStr += " ";
      timeStr += String(rtc.hour()) + ":";
      if (rtc.minute() < 10) timeStr += "0";
      timeStr += String(rtc.minute()) + ":";
      if (rtc.second() < 10) timeStr += "0";
      timeStr += String(rtc.second());
      if (rtc.pm()) 
        timeStr += " PM";
      else
        timeStr += " AM";
      drawString (timeStr.length(), 30, 5, wheelRed(colorIndex), wheelGreen(colorIndex), wheelBlue(colorIndex), timeStr);
      strip.show();
      colorIndex=(colorIndex+1)%256;
    }
  }
  else if (!on && wasOn) {
    colorRect (0, 0, COLS, ROWS, 0, 0, 0, true);
    strip.show();   
 }
}
  



 int toLEDNum(int row, int col) { //The original LED num method. This is still vital.
  int output = 0;
  if (row % 2 == 0) {
    output = (row * colmax) + (row + col);
  }
  else {
    output = (row * colmax) + ((colmax - col) + row);
  }
  return output;
}




///////////////////////////////////////////////////PIXEL
void setPixel(int row, int col, int r, int g, int b)
{
  colorPixel(row, col, r, g, b);
}

void colorPixel(int row, int col, int r, int g, int b)
{
  if (row < 0 || row >= ROWS || col < 0 || col >= COLS)
  {
    return;
  }
  int led = toLEDNum(row, col);
  strip.setPixelColor(led, r, g, b);
}



void clear()
{
  colorRect(0, 0, COLS, ROWS, 0, 0, 0, true);
}

//////////////////////////////////////////////////////////////////////////////Line
void drawLine(int r1, int c1, int r2, int c2, int red, int green, int blue) {
  // Draw line using RGB
  int deltC = c2 - c1;
  int deltR = r2 - r1;
  double slope = (double) deltR / deltC;

  double c = min(c1, c2);
  double r = min(r1, r2);

  if (slope > -1 && slope < 1) {
    if (min(c1, c2) == c2) {
      r = r2;
    }
    else {
      r = r1;
    }
    if (min(r1, r2) == r2) {
      c = c2;
    }
    else {
      c = c1;
    }
    for (int c3 = min(c1, c2); c3 <= max(c1, c2); c3++) {
      r = r + slope;
      setPixel((int)r, c3, red, green, blue);
    }

  }
  else {
    if (min(c1, c2) == c2) {
      r = r2;
    }
    else {
      r = r1;
    }
    if (min(r1, r2) == r2) {
      c = c2;
    }
    else {
      c = c1;
    }
    for (int r3 = min(r1, r2); r3 <= max(r1, r2); r3++) {
      c = c + 1 / slope;
      setPixel(r3, (int)c, red, green, blue);
    }
  }
}

///////////////////////////////////////////////////////////////Rect
void colorRect(int row, int col, int width, int height, int r, int g, int b, boolean solid)
{
  if (solid == false)
  {
    drawLine(row, col, row + height, col, r, g, b);
    drawLine(row, col, row, col + width, r, g, b);
    drawLine(row + height, col, row + height, col + width, r, g, b);
    drawLine(row, col + width, row + height, col + width, r, g, b);
  }
  else
  {
    int finalRow = row + height;

    if (finalRow >= ROWS)
    {
      finalRow = ROWS - 1;
    }
    int finalCol = col + width;
    if (finalCol >= COLS)
    {
      finalCol = COLS - 1;
    }
    for (int rw = row; rw <= finalRow; rw++)
    {
      for (int cl = col; cl <= finalCol; cl++)
      {
        colorPixel(rw, cl, r, g, b);
      }
    }
  }
}

////////////////////////////////////////////////CIRCLE
void drawCircle(int x, int y, int r, int red, int green, int blue, boolean fill)
{
  double i, angle, x1, y1;
  if (fill == false)
  {
    for (i = 0; i < 360; i += 1)
    {
      angle = i;
      x1 = r * cos(angle * PI / 180);
      y1 = r * sin(angle * PI / 180);

      int ElX = (int) (x + x1 + 0.5);
      int ElY = (int) (y + y1 + 0.5);

      setPixel(ElX, ElY, red, green, blue);
    }
  }
  else
  {
    for (int j = r; j >= 0; j--)
    {
      for (i = 0; i < 360; i += 1)
      {
        angle = i;
        x1 = j * cos(angle * PI / 180);
        y1 = j * sin(angle * PI / 180);

        int ElX = (int) (x + x1 + 0.5);
        int ElY = (int) (y + y1 + 0.5);

        setPixel(ElX, ElY, red, green, blue);
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////////////////TEXT
void drawString(int n, int row, int col, int red, int green, int blue, String chars) {
  char charset[256][6]  = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //   0x 0 0
    {0x00, 0x64, 0x18, 0x04, 0x64, 0x18}, // 0x 1 1
    {0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c}, // 0x 2 2
    {0x00, 0x0c, 0x30, 0x40, 0x30, 0x0c}, // 0x 3 3
    {0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c}, // 0x 4 4
    {0x00, 0x00, 0x3e, 0x1c, 0x08, 0x00}, // 0x 5 5
    {0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04}, // 0x 6 6
    {0x00, 0x10, 0x3c, 0x7c, 0x3c, 0x10}, // 0x 7 7
    {0x00, 0x20, 0x40, 0x3e, 0x01, 0x02}, // 0x 8 8
    {0x00, 0x22, 0x14, 0x08, 0x14, 0x22}, //   0x 9 9
    {0x00, 0x00, 0x38, 0x28, 0x38, 0x00}, //   0x a 10
    {0x00, 0x00, 0x10, 0x38, 0x10, 0x00}, // 0x b 11
    {0x00, 0x00, 0x00, 0x10, 0x00, 0x00}, //  0x c 12
    {0x00, 0x08, 0x78, 0x08, 0x00, 0x00}, //   0x d 13
    {0x00, 0x00, 0x15, 0x15, 0x0a, 0x00}, // 0x e 14
    {0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01}, // 0x f 15
    {0x00, 0x10, 0x20, 0x7f, 0x01, 0x01}, // 0x10 16
    {0x00, 0x04, 0x04, 0x00, 0x01, 0x1f}, // 0x11 17
    {0x00, 0x00, 0x19, 0x15, 0x12, 0x00}, // 0x12 18
    {0x00, 0x40, 0x60, 0x50, 0x48, 0x44}, // 0x13 19
    {0x00, 0x06, 0x09, 0x09, 0x06, 0x00}, // 0x14 20
    {0x00, 0x0f, 0x02, 0x01, 0x01, 0x00}, // 0x15 21
    {0x00, 0x00, 0x01, 0x1f, 0x01, 0x00}, // 0x16 22
    {0x00, 0x44, 0x44, 0x4a, 0x4a, 0x51}, // 0x17 23
    {0x00, 0x14, 0x74, 0x1c, 0x17, 0x14}, // 0x18 24
    {0x00, 0x51, 0x4a, 0x4a, 0x44, 0x44}, // 0x19 25
    {0x00, 0x00, 0x00, 0x04, 0x04, 0x04}, //   0x1a 26
    {0x00, 0x00, 0x7c, 0x54, 0x54, 0x44}, // 0x1b 27
    {0x00, 0x08, 0x08, 0x2a, 0x1c, 0x08}, //  0x1c 28
    {0x00, 0x7c, 0x00, 0x7c, 0x44, 0x7c}, //   0x1d 29
    {0x00, 0x04, 0x02, 0x7f, 0x02, 0x04}, //   0x1e 30
    {0x00, 0x10, 0x20, 0x7f, 0x20, 0x10}, //   0x1f 31
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //   0x20 32
    {0x00, 0x00, 0x00, 0x6f, 0x00, 0x00}, // ! 0x21 33
    {0x00, 0x00, 0x07, 0x00, 0x07, 0x00}, // " 0x22 34
    {0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14}, // # 0x23 35
    {0x00, 0x00, 0x07, 0x04, 0x1e, 0x00}, // $ 0x24 36
    {0x00, 0x23, 0x13, 0x08, 0x64, 0x62}, // % 0x25 37
    {0x00, 0x36, 0x49, 0x56, 0x20, 0x50}, // & 0x26 38
    {0x00, 0x00, 0x00, 0x07, 0x00, 0x00}, // ' 0x27 39
    {0x00, 0x00, 0x1c, 0x22, 0x41, 0x00}, // ( 0x28 40
    {0x00, 0x00, 0x41, 0x22, 0x1c, 0x00}, // ) 0x29 41
    {0x00, 0x14, 0x08, 0x3e, 0x08, 0x14}, // * 0x2a 42
    {0x00, 0x08, 0x08, 0x3e, 0x08, 0x08}, // + 0x2b 43
    {0x00, 0x00, 0x50, 0x30, 0x00, 0x00}, // , 0x2c 44
    {0x00, 0x08, 0x08, 0x08, 0x08, 0x08}, // - 0x2d 45
    {0x00, 0x00, 0x60, 0x60, 0x00, 0x00}, // . 0x2e 46
    {0x00, 0x20, 0x10, 0x08, 0x04, 0x02}, // / 0x2f 47
    {0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e}, // 0 0x30 48
    {0x00, 0x00, 0x42, 0x7f, 0x40, 0x00}, // 1 0x31 49
    {0x00, 0x42, 0x61, 0x51, 0x49, 0x46}, // 2 0x32 50
    {0x00, 0x21, 0x41, 0x45, 0x4b, 0x31}, // 3 0x33 51
    {0x00, 0x18, 0x14, 0x12, 0x7f, 0x10}, // 4 0x34 52
    {0x00, 0x27, 0x45, 0x45, 0x45, 0x39}, // 5 0x35 53
    {0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30}, // 6 0x36 54
    {0x00, 0x01, 0x71, 0x09, 0x05, 0x03}, // 7 0x37 55
    {0x00, 0x36, 0x49, 0x49, 0x49, 0x36}, // 8 0x38 56
    {0x00, 0x06, 0x49, 0x49, 0x29, 0x1e}, // 9 0x39 57
    {0x00, 0x00, 0x36, 0x36, 0x00, 0x00}, // : 0x3a 58
    {0x00, 0x00, 0x56, 0x36, 0x00, 0x00}, // ; 0x3b 59
    {0x00, 0x08, 0x14, 0x22, 0x41, 0x00}, // < 0x3c 60
    {0x00, 0x14, 0x14, 0x14, 0x14, 0x14}, // = 0x3d 61
    {0x00, 0x00, 0x41, 0x22, 0x14, 0x08}, // > 0x3e 62
    {0x00, 0x02, 0x01, 0x51, 0x09, 0x06}, // ? 0x3f 63
    {0x00, 0x3e, 0x41, 0x5d, 0x49, 0x4e}, // @ 0x40 64
    {0x00, 0x7e, 0x09, 0x09, 0x09, 0x7e}, // A 0x41 65
    {0x00, 0x7f, 0x49, 0x49, 0x49, 0x36}, // B 0x42 66
    {0x00, 0x3e, 0x41, 0x41, 0x41, 0x22}, // C 0x43 67
    {0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e}, // D 0x44 68
    {0x00, 0x7f, 0x49, 0x49, 0x49, 0x41}, // E 0x45 69
    {0x00, 0x7f, 0x09, 0x09, 0x09, 0x01}, // F 0x46 70
    {0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a}, // G 0x47 71
    {0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f}, // H 0x48 72
    {0x00, 0x00, 0x41, 0x7f, 0x41, 0x00}, // I 0x49 73
    {0x00, 0x20, 0x40, 0x41, 0x3f, 0x01}, // J 0x4a 74
    {0x00, 0x7f, 0x08, 0x14, 0x22, 0x41}, // K 0x4b 75
    {0x00, 0x7f, 0x40, 0x40, 0x40, 0x40}, // L 0x4c 76
    {0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f}, // M 0x4d 77
    {0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f}, // N 0x4e 78
    {0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e}, // O 0x4f 79
    {0x00, 0x7f, 0x09, 0x09, 0x09, 0x06}, // P 0x50 80
    {0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e}, // Q 0x51 81
    {0x00, 0x7f, 0x09, 0x19, 0x29, 0x46}, // R 0x52 82
    {0x00, 0x46, 0x49, 0x49, 0x49, 0x31}, // S 0x53 83
    {0x00, 0x01, 0x01, 0x7f, 0x01, 0x01}, // T 0x54 84
    {0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f}, // U 0x55 85
    {0x00, 0x0f, 0x30, 0x40, 0x30, 0x0f}, // V 0x56 86
    {0x00, 0x3f, 0x40, 0x30, 0x40, 0x3f}, // W 0x57 87
    {0x00, 0x63, 0x14, 0x08, 0x14, 0x63}, // X 0x58 88
    {0x00, 0x07, 0x08, 0x70, 0x08, 0x07}, // Y 0x59 89
    {0x00, 0x61, 0x51, 0x49, 0x45, 0x43}, // Z 0x5a 90
    {0x00, 0x3c, 0x4a, 0x49, 0x29, 0x1e}, // [ 0x5b 91
    {0x00, 0x02, 0x04, 0x08, 0x10, 0x20}, // \ 0x5c 92
    {0x00, 0x00, 0x41, 0x7f, 0x00, 0x00}, // ] 0x5d 93
    {0x00, 0x04, 0x02, 0x01, 0x02, 0x04}, // ^ 0x5e 94
    {0x00, 0x40, 0x40, 0x40, 0x40, 0x40}, // _ 0x5f 95
    {0x00, 0x00, 0x00, 0x03, 0x04, 0x00}, // ` 0x60 96
    {0x00, 0x20, 0x54, 0x54, 0x54, 0x78}, // a 0x61 97
    {0x00, 0x7f, 0x48, 0x44, 0x44, 0x38}, // b 0x62 98
    {0x00, 0x38, 0x44, 0x44, 0x44, 0x20}, // c 0x63 99
    {0x00, 0x38, 0x44, 0x44, 0x48, 0x7f}, // d 0x64 100
    {0x00, 0x38, 0x54, 0x54, 0x54, 0x18}, // e 0x65 101
    {0x00, 0x08, 0x7e, 0x09, 0x01, 0x02}, // f 0x66 102
    {0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e}, // g 0x67 103
    {0x00, 0x7f, 0x08, 0x04, 0x04, 0x78}, // h 0x68 104
    {0x00, 0x00, 0x44, 0x7d, 0x40, 0x00}, // i 0x69 105
    {0x00, 0x20, 0x40, 0x44, 0x3d, 0x00}, // j 0x6a 106
    {0x00, 0x00, 0x7f, 0x10, 0x28, 0x44}, // k 0x6b 107
    {0x00, 0x00, 0x41, 0x7f, 0x40, 0x00}, // l 0x6c 108
    {0x00, 0x7c, 0x04, 0x18, 0x04, 0x78}, // m 0x6d 109
    {0x00, 0x7c, 0x08, 0x04, 0x04, 0x78}, // n 0x6e 110
    {0x00, 0x38, 0x44, 0x44, 0x44, 0x38}, // o 0x6f 111
    {0x00, 0x7c, 0x14, 0x14, 0x14, 0x08}, // p 0x70 112
    {0x00, 0x08, 0x14, 0x14, 0x18, 0x7c}, // q 0x71 113
    {0x00, 0x7c, 0x08, 0x04, 0x04, 0x08}, // r 0x72 114
    {0x00, 0x48, 0x54, 0x54, 0x54, 0x20}, // s 0x73 115
    {0x00, 0x04, 0x3f, 0x44, 0x40, 0x20}, // t 0x74 116
    {0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c}, // u 0x75 117
    {0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c}, // v 0x76 118
    {0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c}, // w 0x77 119
    {0x00, 0x44, 0x28, 0x10, 0x28, 0x44}, // x 0x78 120
    {0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c}, // y 0x79 121
    {0x00, 0x44, 0x64, 0x54, 0x4c, 0x44}, // z 0x7a 122
    {0x00, 0x00, 0x08, 0x36, 0x41, 0x41}, // { 0x7b 123
    {0x00, 0x00, 0x00, 0x7f, 0x00, 0x00}, // | 0x7c 124
    {0x00, 0x41, 0x41, 0x36, 0x08, 0x00}, // } 0x7d 125
    {0x00, 0x04, 0x02, 0x04, 0x08, 0x04}, // ~ 0x7e 126
    {0x00, 0x7f, 0x6b, 0x6b, 0x6b, 0x7f}, //0x7f 127
    {0x00, 0x00, 0x7c, 0x44, 0x7c, 0x00}, //  0x80 128
    {0x00, 0x00, 0x08, 0x7c, 0x00, 0x00}, // 0x81 129
    {0x00, 0x00, 0x64, 0x54, 0x48, 0x00}, //  0x82 130
    {0x00, 0x00, 0x44, 0x54, 0x28, 0x00}, //  0x83 131
    {0x00, 0x00, 0x1c, 0x10, 0x78, 0x00}, //  0x84 132
    {0x00, 0x00, 0x5c, 0x54, 0x24, 0x00}, //  0x85 133
    {0x00, 0x00, 0x78, 0x54, 0x74, 0x00}, //  0x86 134
    {0x00, 0x00, 0x64, 0x14, 0x0c, 0x00}, //  0x87 135
    {0x00, 0x00, 0x7c, 0x54, 0x7c, 0x00}, //  0x88 136
    {0x00, 0x00, 0x5c, 0x54, 0x3c, 0x00}, //  0x89 137
    {0x00, 0x78, 0x24, 0x26, 0x25, 0x78}, //  0x8a 138
    {0x00, 0x78, 0x25, 0x26, 0x24, 0x78}, //  0x8b 139
    {0x00, 0x70, 0x2a, 0x29, 0x2a, 0x70}, //  0x8c 140
    {0x00, 0x78, 0x25, 0x24, 0x25, 0x78}, // 0x8d 141
    {0x00, 0x20, 0x54, 0x56, 0x55, 0x78}, //  0x8e 142
    {0x00, 0x20, 0x55, 0x56, 0x54, 0x78}, //  0x8f 143
    {0x00, 0x20, 0x56, 0x55, 0x56, 0x78}, // 0x90 144
    {0x00, 0x20, 0x55, 0x54, 0x55, 0x78}, //  0x91 145
    {0x00, 0x7c, 0x54, 0x56, 0x55, 0x44}, //  0x92 146
    {0x00, 0x7c, 0x55, 0x56, 0x54, 0x44}, // 0x93 147
    {0x00, 0x7c, 0x56, 0x55, 0x56, 0x44}, //  0x94 148
    {0x00, 0x7c, 0x55, 0x54, 0x55, 0x44}, //  0x95 149
    {0x00, 0x38, 0x54, 0x56, 0x55, 0x18}, //  0x96 150
    {0x00, 0x38, 0x55, 0x56, 0x54, 0x18}, //  0x97 151
    {0x00, 0x38, 0x56, 0x55, 0x56, 0x18}, //  0x98 152
    {0x00, 0x38, 0x55, 0x54, 0x55, 0x18}, //  0x99 153
    {0x00, 0x00, 0x44, 0x7e, 0x45, 0x00}, //  0x9a 154
    {0x00, 0x00, 0x45, 0x7e, 0x44, 0x00}, //  0x9b 155
    {0x00, 0x00, 0x46, 0x7d, 0x46, 0x00}, //  0x9c 156
    {0x00, 0x00, 0x45, 0x7c, 0x45, 0x00}, //  0x9d 157
    {0x00, 0x00, 0x48, 0x7a, 0x41, 0x00}, //  0x9e 158
    {0x00, 0x00, 0x49, 0x7a, 0x40, 0x00}, //  0x9f 159
    {0x00, 0x00, 0x4a, 0x79, 0x42, 0x00}, //  0xa0 160
    {0x00, 0x00, 0x49, 0x78, 0x41, 0x00}, //  0xa1 161
    {0x00, 0x38, 0x44, 0x46, 0x45, 0x38}, //  0xa2 162
    {0x00, 0x38, 0x45, 0x46, 0x44, 0x38}, //  0xa3 163
    {0x00, 0x38, 0x46, 0x45, 0x46, 0x38}, //  0xa4 164
    {0x00, 0x38, 0x45, 0x44, 0x45, 0x38}, //  0xa5 165
    {0x00, 0x30, 0x48, 0x4a, 0x49, 0x30}, //  0xa6 166
    {0x00, 0x30, 0x49, 0x4a, 0x48, 0x30}, //  0xa7 167
    {0x00, 0x30, 0x4a, 0x49, 0x4a, 0x30}, //  0xa8 168
    {0x00, 0x30, 0x49, 0x48, 0x49, 0x30}, //  0xa9 169
    {0x00, 0x3c, 0x40, 0x42, 0x41, 0x3c}, //  0xaa 170
    {0x00, 0x3c, 0x41, 0x42, 0x40, 0x3c}, //  0xab 171
    {0x00, 0x3c, 0x42, 0x41, 0x42, 0x3c}, //  0xac 172
    {0x00, 0x3c, 0x41, 0x40, 0x41, 0x3c}, //  0xad 173
    {0x00, 0x3c, 0x40, 0x42, 0x21, 0x7c}, //  0xae 174
    {0x00, 0x3c, 0x41, 0x42, 0x20, 0x7c}, //  0xaf 175
    {0x00, 0x38, 0x42, 0x41, 0x22, 0x78}, // 0xb0 176
    {0x00, 0x3c, 0x41, 0x40, 0x21, 0x7c}, //  0xb1 177
    {0x00, 0x4e, 0x51, 0x71, 0x11, 0x0a}, //  0xb2 178
    {0x00, 0x58, 0x64, 0x64, 0x24, 0x10}, //  0xb3 179
    {0x00, 0x7c, 0x0a, 0x11, 0x22, 0x7d}, //  0xb4 180
    {0x00, 0x78, 0x12, 0x09, 0x0a, 0x71}, //  0xb5 181
    {0x00, 0x00, 0x00, 0x04, 0x02, 0x01}, //  0xb6 182
    {0x00, 0x01, 0x02, 0x04, 0x00, 0x00}, //  0xb7 183
    {0x00, 0x00, 0x02, 0x00, 0x02, 0x00}, //  0xb8 184
    {0x00, 0x30, 0x48, 0x45, 0x40, 0x20}, //  0xb9 185
    {0x00, 0x00, 0x00, 0x7b, 0x00, 0x00}, //  0xba 186
    {0x00, 0x38, 0x44, 0x44, 0x38, 0x44}, //  0xbb 187
    {0x00, 0x40, 0x3e, 0x49, 0x49, 0x36}, //  0xbc 188
    {0x00, 0x08, 0x04, 0x08, 0x70, 0x0c}, //  0xbd 189
    {0x00, 0x60, 0x50, 0x48, 0x50, 0x60}, //  0xbe 190
    {0x00, 0x20, 0x52, 0x55, 0x59, 0x30}, //  0xbf 191
    {0x00, 0x38, 0x54, 0x54, 0x54, 0x00}, //  0xc0 192
    {0x00, 0x00, 0x00, 0x7f, 0x41, 0x00}, //  0xc1 193
    {0x00, 0x40, 0x22, 0x14, 0x18, 0x60}, //  0xc2 194
    {0x00, 0x7c, 0x20, 0x20, 0x1c, 0x20}, //  0xc3 195
    {0x00, 0x44, 0x3c, 0x04, 0x7c, 0x44}, //  0xc4 196
    {0x00, 0x40, 0x3c, 0x12, 0x12, 0x0c}, //  0xc5 197
    {0x00, 0x41, 0x63, 0x55, 0x49, 0x41}, //  0xc6 198
    {0x00, 0x38, 0x44, 0x44, 0x3c, 0x04}, //  0xc7 199
    {0x00, 0x08, 0x04, 0x3c, 0x44, 0x24}, //  0xc8 200
    {0x00, 0x08, 0x14, 0x7f, 0x14, 0x08}, //  0xc9 201
    {0x00, 0x4e, 0x71, 0x01, 0x71, 0x4e}, //  0xca 202
    {0x00, 0x45, 0x29, 0x11, 0x29, 0x45}, //  0xcb 203
    {0x00, 0x0d, 0x51, 0x51, 0x51, 0x3d}, //  0xcc 204
    {0x00, 0x00, 0x00, 0x05, 0x02, 0x05}, //  0xcd 205
    {0x00, 0x40, 0x00, 0x40, 0x00, 0x40}, //  0xce 206
    {0x00, 0x00, 0x08, 0x1c, 0x3e, 0x00}, //  0xcf 207
    {0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00}, //  0xd0 208
    {0x00, 0x00, 0x70, 0x08, 0x07, 0x00}, //  0xd1 209
    {0x00, 0x00, 0x08, 0x08, 0x08, 0x00}, //  0xd2 210
    {0x00, 0x00, 0x1d, 0x15, 0x17, 0x00}, //  0xd3 211
    {0x00, 0x00, 0x07, 0x05, 0x07, 0x00}, //  0xd4 212
    {0x00, 0x00, 0x11, 0x15, 0x0a, 0x00}, //  0xd5 213
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //  0xd6 214
    {0x00, 0x04, 0x3c, 0x41, 0x20, 0x00}, // 0xd7 215
    {0x00, 0x7c, 0x16, 0x15, 0x16, 0x08}, //  0xd8 216
    {0x00, 0x21, 0x16, 0x08, 0x34, 0x42}, //  0xd9 217
    {0x00, 0x7f, 0x09, 0x1d, 0x01, 0x03}, //  0xda 218
    {0x00, 0x38, 0x54, 0x54, 0x14, 0x08}, //  0xdb 219
    {0x00, 0x00, 0x00, 0x7c, 0x40, 0x40}, //  0xdc 220
    {0x00, 0x7f, 0x0e, 0x1c, 0x38, 0x7f}, //  0xdd 221
    {0x00, 0x41, 0x22, 0x5d, 0x22, 0x1c}, //  0xde 222
    {0x00, 0x1c, 0x3e, 0x1c, 0x08, 0x00}, //  0xdf 223
    {0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f}, //  0xe0 224
    {0x00, 0x77, 0x7b, 0x01, 0x7b, 0x77}, //  0xe1 225
    {0x00, 0x7f, 0x43, 0x75, 0x43, 0x7f}, //  0xe2 226
    {0x00, 0x7f, 0x6f, 0x55, 0x43, 0x7f}, //  0xe3 227
    {0x00, 0x40, 0x40, 0x40, 0x40, 0x40}, //  0xe4 228
    {0x00, 0x44, 0x42, 0x5f, 0x42, 0x44}, //  0xe5 229
    {0x00, 0x40, 0x5e, 0x45, 0x5e, 0x40}, //  0xe6 230
    {0x00, 0x40, 0x48, 0x55, 0x5e, 0x40}, //0xe7 231
    {0x00, 0x00, 0x04, 0x08, 0x10, 0x20}, // 0xe8 232
    {0x00, 0x03, 0x07, 0x0e, 0x1c, 0x38}, //  0xe9 233
    {0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f}, //  0xea 234
    {0x00, 0x7c, 0x78, 0x70, 0x60, 0x40}, //  0xeb 235
    {0x00, 0x08, 0x08, 0x1c, 0x22, 0x1c}, //  0xec 236
    {0x00, 0x00, 0x1c, 0x22, 0x1c, 0x00}, //  0xed 237
    {0x00, 0x02, 0x00, 0x08, 0x00, 0x20}, //  0xee 238
    {0x00, 0x04, 0x3e, 0x3f, 0x3e, 0x04}, //  0xef 239
    {0x00, 0x10, 0x3e, 0x7e, 0x3e, 0x10}, //  0xf0 240
    {0x00, 0x55, 0x2a, 0x55, 0x2a, 0x55}, //  0xf1 241
    {0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12}, //  0xf2 242
    {0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04}, //
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  };
  int extraSpacing = 0; // extra spacing between letters

  for (int i = 0; i < n; i++)
  { // for each character in "chars"...
    char letter = chars.charAt(i); // get corresponding letter
    //Serial.print("" + letter.toInt());
    char locs[6] = {};
    memcpy(locs, charset[letter], 6); //array of hex codes for each row of pixels in the letter
    //      System.out.println("L: " + letter + "; HC: " + letter.hashCode());
    if (letter == 32)//if the character is a space (" ")...
    {
      extraSpacing -= 3;//reduce the spacing
    }
    for (int c = 0; c < sizeof(locs); c++) // for each column...
    {
      int r = 0; // intialized row count
      for (int j = 1; j <= 256; j *= 2) // for each pixel/binary in the row...
      {
        if (((locs[c]) & j) != 0) //if the pixel should be on...
        {

          setPixel(r + row, c + col + extraSpacing, red, green, blue);//turn the pixel on
        }

        r++;//increase the row count
      }
    }
    extraSpacing += 6; //add spacing between letters
  }

}
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

int wheelRed(int WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return 255 - WheelPos * 3;
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return 0;
  }
  WheelPos -= 170;
  return WheelPos * 3;
}

int wheelGreen(int WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return 0;
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return WheelPos * 3;
  }
  WheelPos -= 170;
  return 255 - WheelPos * 3;
}

int wheelBlue(int WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return WheelPos * 3;
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return 255 - WheelPos * 3;
  }
  WheelPos -= 170;
  return 0;
}
